
{$BYTEBITS=16}
{$BYTEFORMAT=OCTAL}
{$MEMORY=32Ki}

; instructions
{mov}
{ior}
{xor}
{and}
{rot}
{add}
{lda}
{sta}

; synthetic instructions
{jmp}

; skip types
{skp:%q=1}
{srz:%q}
{srn:%q}
{scz:%q}
{scn:%q}
{sez:%q}
{snz:%q}

; registers
{r0:%r=0}
{r1:%r}
{r2:%r}
{r3:%r}
{r4:%r}
{r5:%r}
{sp:%r}
{pc:%r}

; instruction formats
%i: {
		$0 = $1
	}

\%i: {
		$0 = $0 + ($1 - ($0 % $1))
	}

%i {
		$0++ @= $1
	}

%i%i {
		$0++ @= $1, $0++ @= $2
	}

%i%i%i {
		$0++ @= $1, $0++ @= $2, $0++ @= $3
	}

%i%i%i%i {
		$0++ @= $1, $0++ @= $2, $0++ @= $3, $0++ @= $4
	}

%i%i%i%i%i {
		$0++ @= $1, $0++ @= $2, $0++ @= $3, $0++ @= $4,
		$0++ @= $5
	}

%i%i%i%i%i%i {
		$0++ @= $1, $0++ @= $2, $0++ @= $3, $0++ @= $4,
		$0++ @= $5, $0++ @= $6
	}

%i%i%i%i%i%i%i {
		$0++ @= $1, $0++ @= $2, $0++ @= $3, $0++ @= $4,
		$0++ @= $5, $0++ @= $6, $0++ @= $7
	}

%i%i%i%i%i%i%i%i {
		$0++ @= $1, $0++ @= $2, $0++ @= $3, $0++ @= $4,
		$0++ @= $5, $0++ @= $6, $0++ @= $7, $0++ @= $8
	}

%a: {
		@1 = $0
	}

%a {
		$0++ @= 0,
		true
	}:{
		(@1 <> 0) ? (
			$0++ @= @1
		)!(
			INVALID
		)
	}

; $1 accumulator
; $2 operand
; $3 skip type
; ---------------
; $4 operand mode
; $5 operation

{EMIT_INSTRUCTION{
	$0++ @= ($3 << 12) | ($1 << 9) | ($2 << 6) | ($4 << 3) | $5
}}

{EMIT_IMMEDIATE{
	$9 = |$2,
	($9 > 017) ? (
		INVALID
	)!($2 <= 07) ? (
		$4 = 0, EMIT_INSTRUCTION
	)!($2 >= 077770) ? (
		$4 = 1, $2 = $2 & 07, EMIT_INSTRUCTION
	)!((($2 & ($2 - 1)) == 0) && ($9 >= 4) && ($9 <= 11)) ? (
		$4 = 2, $2 = $9 - 4, EMIT_INSTRUCTION
	)!((($2 & ($2 + 1)) == 0) && ($9 >= 4) && ($9 <= 11)) ? (
		$4 = 3, $2 = $9 - 4, EMIT_INSTRUCTION
	)!(
		INVALID
	)
}}

{EMIT_MOV_IMMEDIATE{
	$9 = |$2,
	($9 > 017) ? (
		INVALID
	)!($2 <= 07) ? (
		$4 = 0, EMIT_INSTRUCTION
	)!($2 >= 077770) ? (
		$4 = 1, $2 = $2 & 07, EMIT_INSTRUCTION
	)!((($2 & ($2 - 1)) == 0) && ($9 >= 4) && ($9 <= 11)) ? (
		$4 = 2, $2 = $9 - 4, EMIT_INSTRUCTION
	)!((($2 & ($2 + 1)) == 0) && ($9 >= 4) && ($9 <= 11)) ? (
		$4 = 3, $2 = $9 - 4, EMIT_INSTRUCTION
	)!(
		; replace mov with lda
		$9 = $2,
		$5 = 6, $4 = 7, $2 = 7, EMIT_INSTRUCTION,
		$0++ @= $9
	)
}}

{EMIT_MOV_ADDRESS{
	$0++ @= 0,
	$0++ @= 0,
	true
}}

{EMIT_MOV_PATCH_ADDRESS{
	(@2 <> 0) ? (
		; replace mov with lda
		$9 = @2,
		$5 = 6, $4 = 7, $2 = 7, EMIT_INSTRUCTION,
		$0++ @= $9,
	)!(
		INVALID
	)
}}

mov%r%a     { EMIT_MOV_ADDRESS }:{ $3 = 0,                  EMIT_MOV_PATCH_ADDRESS }
jmp%a       { EMIT_MOV_ADDRESS }:{ $3 = 0, $2 = $1, $1 = 7, EMIT_MOV_PATCH_ADDRESS }

mov%r%a%q   { EMIT_MOV_ADDRESS }:{                  EMIT_MOV_PATCH_ADDRESS }
jmp%a%q     { EMIT_MOV_ADDRESS }:{ $2 = $1, $1 = 7, EMIT_MOV_PATCH_ADDRESS }

mov%r%i     { $5 = 0, $3 = 0, EMIT_MOV_IMMEDIATE }
ior%r%i     { $5 = 1, $3 = 0, EMIT_IMMEDIATE }
xor%r%i     { $5 = 2, $3 = 0, EMIT_IMMEDIATE }
and%r%i     { $5 = 3, $3 = 0, EMIT_IMMEDIATE }
rot%r%i     { $5 = 4, $3 = 0, EMIT_IMMEDIATE }
add%r%i     { $5 = 5, $3 = 0, EMIT_IMMEDIATE }
lda%r%i     { $5 = 6, $3 = 0, EMIT_IMMEDIATE }
sta%r%i     { $5 = 7, $3 = 0, EMIT_IMMEDIATE }

mov%r%i%q   { $5 = 0, EMIT_MOV_IMMEDIATE }
ior%r%i%q   { $5 = 1, EMIT_IMMEDIATE }
xor%r%i%q   { $5 = 2, EMIT_IMMEDIATE }
and%r%i%q   { $5 = 3, EMIT_IMMEDIATE }
rot%r%i%q   { $5 = 4, EMIT_IMMEDIATE }
add%r%i%q   { $5 = 5, EMIT_IMMEDIATE }
lda%r%i%q   { $5 = 6, EMIT_IMMEDIATE }
sta%r%i%q   { $5 = 7, EMIT_IMMEDIATE }

mov%r-%i    { $5 = 0, $3 = 0, $2 = -$2, EMIT_MOV_IMMEDIATE }
ior%r-%i    { $5 = 1, $3 = 0, $2 = -$2, EMIT_IMMEDIATE }
xor%r-%i    { $5 = 2, $3 = 0, $2 = -$2, EMIT_IMMEDIATE }
and%r-%i    { $5 = 3, $3 = 0, $2 = -$2, EMIT_IMMEDIATE }
rot%r-%i    { $5 = 4, $3 = 0, $2 = -$2, EMIT_IMMEDIATE }
add%r-%i    { $5 = 5, $3 = 0, $2 = -$2, EMIT_IMMEDIATE }
lda%r-%i    { $5 = 6, $3 = 0, $2 = -$2, EMIT_IMMEDIATE }
sta%r-%i    { $5 = 7, $3 = 0, $2 = -$2, EMIT_IMMEDIATE }

mov%r-%i%q  { $5 = 0, $2 = -$2, EMIT_MOV_IMMEDIATE }
ior%r-%i%q  { $5 = 1, $2 = -$2, EMIT_IMMEDIATE }
xor%r-%i%q  { $5 = 2, $2 = -$2, EMIT_IMMEDIATE }
and%r-%i%q  { $5 = 3, $2 = -$2, EMIT_IMMEDIATE }
rot%r-%i%q  { $5 = 4, $2 = -$2, EMIT_IMMEDIATE }
add%r-%i%q  { $5 = 5, $2 = -$2, EMIT_IMMEDIATE }
lda%r-%i%q  { $5 = 6, $2 = -$2, EMIT_IMMEDIATE }
sta%r-%i%q  { $5 = 7, $2 = -$2, EMIT_IMMEDIATE }

mov%r~%i    { $5 = 0, $3 = 0, $2 = ~$2, EMIT_MOV_IMMEDIATE }
ior%r~%i    { $5 = 1, $3 = 0, $2 = ~$2, EMIT_IMMEDIATE }
xor%r~%i    { $5 = 2, $3 = 0, $2 = ~$2, EMIT_IMMEDIATE }
and%r~%i    { $5 = 3, $3 = 0, $2 = ~$2, EMIT_IMMEDIATE }
rot%r~%i    { $5 = 4, $3 = 0, $2 = ~$2, EMIT_IMMEDIATE }
add%r~%i    { $5 = 5, $3 = 0, $2 = ~$2, EMIT_IMMEDIATE }
lda%r~%i    { $5 = 6, $3 = 0, $2 = ~$2, EMIT_IMMEDIATE }
sta%r~%i    { $5 = 7, $3 = 0, $2 = ~$2, EMIT_IMMEDIATE }

mov%r~%i%q  { $5 = 0, $2 = ~$2, EMIT_MOV_IMMEDIATE }
ior%r~%i%q  { $5 = 1, $2 = ~$2, EMIT_IMMEDIATE }
xor%r~%i%q  { $5 = 2, $2 = ~$2, EMIT_IMMEDIATE }
and%r~%i%q  { $5 = 3, $2 = ~$2, EMIT_IMMEDIATE }
rot%r~%i%q  { $5 = 4, $2 = ~$2, EMIT_IMMEDIATE }
add%r~%i%q  { $5 = 5, $2 = ~$2, EMIT_IMMEDIATE }
lda%r~%i%q  { $5 = 6, $2 = ~$2, EMIT_IMMEDIATE }
sta%r~%i%q  { $5 = 7, $2 = ~$2, EMIT_IMMEDIATE }

mov%r%r     { $5 = 0, $4 = 4, $3 = 0, EMIT_INSTRUCTION }
ior%r%r     { $5 = 1, $4 = 4, $3 = 0, EMIT_INSTRUCTION }
xor%r%r     { $5 = 2, $4 = 4, $3 = 0, EMIT_INSTRUCTION }
and%r%r     { $5 = 3, $4 = 4, $3 = 0, EMIT_INSTRUCTION }
rot%r%r     { $5 = 4, $4 = 4, $3 = 0, EMIT_INSTRUCTION }
add%r%r     { $5 = 5, $4 = 4, $3 = 0, EMIT_INSTRUCTION }
lda%r%r     { $5 = 6, $4 = 4, $3 = 0, EMIT_INSTRUCTION }
sta%r%r     { $5 = 7, $4 = 4, $3 = 0, EMIT_INSTRUCTION }

mov%r%r%q   { $5 = 0, $4 = 4, EMIT_INSTRUCTION }
ior%r%r%q   { $5 = 1, $4 = 4, EMIT_INSTRUCTION }
xor%r%r%q   { $5 = 2, $4 = 4, EMIT_INSTRUCTION }
and%r%r%q   { $5 = 3, $4 = 4, EMIT_INSTRUCTION }
rot%r%r%q   { $5 = 4, $4 = 4, EMIT_INSTRUCTION }
add%r%r%q   { $5 = 5, $4 = 4, EMIT_INSTRUCTION }
lda%r%r%q   { $5 = 6, $4 = 4, EMIT_INSTRUCTION }
sta%r%r%q   { $5 = 7, $4 = 4, EMIT_INSTRUCTION }

mov%r-%r    { $5 = 0, $4 = 5, $3 = 0, EMIT_INSTRUCTION }
ior%r-%r    { $5 = 1, $4 = 5, $3 = 0, EMIT_INSTRUCTION }
xor%r-%r    { $5 = 2, $4 = 5, $3 = 0, EMIT_INSTRUCTION }
and%r-%r    { $5 = 3, $4 = 5, $3 = 0, EMIT_INSTRUCTION }
rot%r-%r    { $5 = 4, $4 = 5, $3 = 0, EMIT_INSTRUCTION }
add%r-%r    { $5 = 5, $4 = 5, $3 = 0, EMIT_INSTRUCTION }
lda%r-%r    { $5 = 6, $4 = 5, $3 = 0, EMIT_INSTRUCTION }
sta%r-%r    { $5 = 7, $4 = 5, $3 = 0, EMIT_INSTRUCTION }

mov%r-%r%q  { $5 = 0, $4 = 5, EMIT_INSTRUCTION }
ior%r-%r%q  { $5 = 1, $4 = 5, EMIT_INSTRUCTION }
xor%r-%r%q  { $5 = 2, $4 = 5, EMIT_INSTRUCTION }
and%r-%r%q  { $5 = 3, $4 = 5, EMIT_INSTRUCTION }
rot%r-%r%q  { $5 = 4, $4 = 5, EMIT_INSTRUCTION }
add%r-%r%q  { $5 = 5, $4 = 5, EMIT_INSTRUCTION }
lda%r-%r%q  { $5 = 6, $4 = 5, EMIT_INSTRUCTION }
sta%r-%r%q  { $5 = 7, $4 = 5, EMIT_INSTRUCTION }

mov%r--%r   { $5 = 0, $4 = 6, $3 = 0, EMIT_INSTRUCTION }
ior%r--%r   { $5 = 1, $4 = 6, $3 = 0, EMIT_INSTRUCTION }
xor%r--%r   { $5 = 2, $4 = 6, $3 = 0, EMIT_INSTRUCTION }
and%r--%r   { $5 = 3, $4 = 6, $3 = 0, EMIT_INSTRUCTION }
rot%r--%r   { $5 = 4, $4 = 6, $3 = 0, EMIT_INSTRUCTION }
add%r--%r   { $5 = 5, $4 = 6, $3 = 0, EMIT_INSTRUCTION }
lda%r--%r   { $5 = 6, $4 = 6, $3 = 0, EMIT_INSTRUCTION }
sta%r--%r   { $5 = 7, $4 = 6, $3 = 0, EMIT_INSTRUCTION }

mov%r--%r%q { $5 = 0, $4 = 6, EMIT_INSTRUCTION }
ior%r--%r%q { $5 = 1, $4 = 6, EMIT_INSTRUCTION }
xor%r--%r%q { $5 = 2, $4 = 6, EMIT_INSTRUCTION }
and%r--%r%q { $5 = 3, $4 = 6, EMIT_INSTRUCTION }
rot%r--%r%q { $5 = 4, $4 = 6, EMIT_INSTRUCTION }
add%r--%r%q { $5 = 5, $4 = 6, EMIT_INSTRUCTION }
lda%r--%r%q { $5 = 6, $4 = 6, EMIT_INSTRUCTION }
sta%r--%r%q { $5 = 7, $4 = 6, EMIT_INSTRUCTION }

mov%r%r++   { $5 = 0, $4 = 7, $3 = 0, EMIT_INSTRUCTION }
ior%r%r++   { $5 = 1, $4 = 7, $3 = 0, EMIT_INSTRUCTION }
xor%r%r++   { $5 = 2, $4 = 7, $3 = 0, EMIT_INSTRUCTION }
and%r%r++   { $5 = 3, $4 = 7, $3 = 0, EMIT_INSTRUCTION }
rot%r%r++   { $5 = 4, $4 = 7, $3 = 0, EMIT_INSTRUCTION }
add%r%r++   { $5 = 5, $4 = 7, $3 = 0, EMIT_INSTRUCTION }
lda%r%r++   { $5 = 6, $4 = 7, $3 = 0, EMIT_INSTRUCTION }
sta%r%r++   { $5 = 7, $4 = 7, $3 = 0, EMIT_INSTRUCTION }

mov%r%r++%q { $5 = 0, $4 = 7, EMIT_INSTRUCTION }
ior%r%r++%q { $5 = 1, $4 = 7, EMIT_INSTRUCTION }
xor%r%r++%q { $5 = 2, $4 = 7, EMIT_INSTRUCTION }
and%r%r++%q { $5 = 3, $4 = 7, EMIT_INSTRUCTION }
rot%r%r++%q { $5 = 4, $4 = 7, EMIT_INSTRUCTION }
add%r%r++%q { $5 = 5, $4 = 7, EMIT_INSTRUCTION }
lda%r%r++%q { $5 = 6, $4 = 7, EMIT_INSTRUCTION }
sta%r%r++%q { $5 = 7, $4 = 7, EMIT_INSTRUCTION }
